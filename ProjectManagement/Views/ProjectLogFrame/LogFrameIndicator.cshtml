
@{
    ViewData["Title"] = "Log Frame Indicator";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}


@section Styles{
    <link href="~/pages-css/steper-style.css" rel="stylesheet">
    <link href="~/pages-css/log-frame-indicator.css?v=1" rel="stylesheet">
}

<div class="container">
    <h4 class="page-header mt-3">Log Indicator</h4>
    <p class="mb-3">@ViewBag.ProjectSector.Sector</p>

    <div class="card card-body">
        <ul class="progressbar" id="stepProgress">
            <li onclick="stepClick(1,this)" class="active">Indicator</li>
            <li onclick="stepClick(2,this)">Output</li>
            <li onclick="stepClick(3,this)">Activity </li>
        </ul>

        <div class="md-form">
            <select id="selectProjectName" name="ProjectId" asp-items="@ViewBag.ProjectName" class="mdb-select" searchable="Search here.." required>
                <option value="" disabled selected>Choose Project Name</option>
            </select>
            <span id="selectProject" class="red-text"></span>
        </div>

        <form id="formStep1" name="form1" class="hide-form active-form">
            <div class="row">
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputProjectGoal">Project Goal</label>
                        <input name="ProjectGoal" type="text" id="inputProjectGoal" class="form-control">
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputResultIndirector">Result Base Indirector</label>
                        <input name="ResultBaseIndicator" type="text" id="inputResultIndirector" class="form-control">
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputOutcome">Outcome</label>
                        <input name="Outcome" type="text" id="inputOutcome" class="form-control">
                    </div>
                </div>

                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputOutcomeIndirector">Outcome Base Indirector</label>
                        <input name="OutcomeBaseIndicator" type="text" id="inputOutcomeIndirector" class="form-control">
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBaselineValue">Baseline Value</label>
                        <input name="BaselineValue" type="number" id="inputBaselineValue" class="form-control">
                    </div>

                    <div class="md-form">
                        <label for="inputTargetValue">Target Value</label>
                        <input name="TargetValue" type="number" id="inputTargetValue" class="form-control">
                    </div>

                    <div class="md-form">
                        <label for="inputAchieveValue">Achieve Value</label>
                        <input name="AchieveValue" type="number" id="inputAchieveValue" class="form-control">
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBaselineDate">Baseline Date</label>
                        <input name="BaselineDate" type="text" id="inputBaselineDate" class="form-control datepicker">
                    </div>

                    <div class="md-form">
                        <label for="inputDate1">Date</label>
                        <input name="Date1" type="text" id="inputDate1" class="form-control datepicker">
                    </div>

                    <div class="md-form">
                        <label for="inputDate2">Date</label>
                        <input name="Date2" type="text" id="inputDate2" class="form-control datepicker">
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="md-form" style="height: 20%"></div>

                    <select id="selectFrequency1" name="Frequency1" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                    </select>

                    <select id="selectFrequency2" name="Frequency2" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <select id="selectPrimarySource" name="PrimarySource" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Primary Source</option>
                        <option value="Primary Source of Data">Primary Source of Data</option>
                        <option value="DHIS 2">DHIS 2</option>
                    </select>
                </div>
                <div class="col-lg-6">
                    <select id="selectMeasuringUnit" name="MeasuringUnit" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Measuring Unit</option>
                        <option value="Person">Person</option>
                        <option value="KM">KM</option>
                        <option value="%">%</option>
                    </select>
                </div>
            </div>

            <fieldset class="border px-4 pb-4 pt-2 rounded mt-3">
                <legend class="w-auto m-0">Location</legend>
                <div class="row">
                    <div class="col-lg-3">
                        <select asp-items="@ViewBag.Country" id="selectCountry" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>District</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <select id="selectState" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>Sub-District</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <select id="selectCity" name="CityId" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>Village</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <button id="btnLocationAdd" type="button" class="btn btn-sm btn-outline-success btn-rounded mb-0"><i class="fas fa-map-marker-alt"></i> Add Location</button>
                    </div>
                </div>
            </fieldset>

            <label id="beneficiaryError" class="red-text d-inline-block"></label>
            <table class="table table-sm">
                <thead class="grey lighten-5">
                    <tr>
                        <th>
                            <select asp-items="@ViewBag.Participants" id="selectParticipant1" class="mdb-select md-form m-0">
                                <option value="" disabled selected>Participants</option>
                            </select>
                        </th>
                        <th>
                            <div class="md-form m-0">
                                <input type="text" id="inputParticipant1" class="form-control">
                                <label for="inputParticipant1">Participant Count</label>
                            </div>
                        </th>
                        <th class="text-right" style="width: 130px">
                            <button id="btnBeneficiaryAdd" type="button" class="btn btn-sm btn-outline-success btn-rounded mb-0"><i class="fas fa-user-plus"></i> Add</button>
                        </th>
                    </tr>
                </thead>
                <tbody id="participantBody1"></tbody>
            </table>

            <div class="d-flex justify-content-between align-items-center mt-5">
                <button id="btnDeleteStep1" class="btn btn-danger">Delete</button>
                <div class="text-right">
                    <button id="btnStep1" type="submit" class="btn btn-custom-bg">Submit</button>
                    <button type="button" onclick="stepClick(2, document.getElementById('stepProgress').children[1])" class="btn btn-outline-info">Next Step <i class="fas fa-arrow-right ml-2"></i></button>
                </div>
            </div>
        </form>

        <form id="formStep2" name="form2" class="hide-form">
            <div class="row">
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputOutputIndirector">Output Base Indirector</label>
                        <input name="OutputBaseIndicator" type="text" id="inputOutputIndirector" class="form-control">
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputOutput">Output</label>
                        <input name="Output" type="text" id="inputOutput" class="form-control">
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBaselineValue">Baseline Value</label>
                        <input name="BaselineValue" type="number" id="inputBaselineValue1" class="form-control">
                    </div>

                    <div class="md-form">
                        <label for="inputTargetValue">Target Value</label>
                        <input name="TargetValue" type="number" id="inputTargetValue1" class="form-control">
                    </div>

                    <div class="md-form">
                        <label for="inputAchieveValue">Achieve Value</label>
                        <input name="AchieveValue" type="number" id="inputAchieveValue1" class="form-control">
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBaselineDate">Baseline Date</label>
                        <input name="BaselineDate" type="text" id="inputBaselineDate1" class="form-control datepicker">
                    </div>

                    <div class="md-form">
                        <label for="inputDate1">Date</label>
                        <input name="Date1" type="text" id="inputDate1-0" class="form-control datepicker">
                    </div>

                    <div class="md-form">
                        <label for="inputDate2-0">Date</label>
                        <input name="Date2" type="text" id="inputDate2-0" class="form-control datepicker">
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="md-form" style="height: 20%"></div>

                    <select id="selectFrequency1-0" name="Frequency1" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                    </select>

                    <select id="selectFrequency2-0" name="Frequency2" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <select id="selectMeasuringUnit1" name="MeasuringUnit" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Measuring Unit</option>
                        <option value="Person">Person</option>
                        <option value="KM">KM</option>
                    </select>
                </div>
                <div class="col-lg-6">
                    <select id="selectPrimarySource2" name="PrimarySource" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Primary Source</option>
                        <option value="Project Progress Report">Project Progress Report</option>
                        <option value="Programmatic Visit Report">Programmatic Visit Report</option>
                    </select>
                </div>
            </div>

            <fieldset class="border px-4 pb-4 pt-2 rounded mt-3">
                <legend class="w-auto m-0">Location</legend>
                <div class="row">
                    <div class="col-lg-3">
                        <select asp-items="@ViewBag.Country" id="selectCountry2" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>District</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <select id="selectState2" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>Sub-District</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <select id="selectCity2" name="CityId" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>Village</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <button id="btnLocationAdd2" type="button" class="btn btn-sm btn-outline-success btn-rounded mb-0"><i class="fas fa-map-marker-alt"></i> Add Location</button>
                    </div>
                </div>
            </fieldset>

            <label id="beneficiaryError2" class="red-text d-inline-block"></label>
            <table class="table table-sm">
                <thead class="grey lighten-5">
                    <tr>
                        <th>
                            <select asp-items="@ViewBag.Participants" id="selectParticipant2" class="mdb-select md-form m-0">
                                <option value="" disabled selected>Participants</option>
                            </select>
                        </th>
                        <th>
                            <div class="md-form m-0">
                                <input type="text" id="inputParticipant2" class="form-control">
                                <label for="inputParticipant2">Participant Count</label>
                            </div>
                        </th>
                        <th class="text-right" style="width: 130px">
                            <button id="btnBeneficiaryAdd2" type="button" class="btn btn-sm btn-outline-success btn-rounded mb-0"><i class="fas fa-user-plus"></i> Add</button>
                        </th>
                    </tr>
                </thead>
                <tbody id="participantBody2"></tbody>
            </table>

            <div class="d-flex justify-content-between align-items-center mt-5">
                <button id="btnDeleteStep2" class="btn btn-danger">Delete</button>
                <div class="text-right">
                    <button id="btnStep2" type="submit" class="btn btn-custom-bg">Submit</button>
                    <button type="button" onclick="stepClick(3, document.getElementById('stepProgress').children[2])" class="btn btn-outline-info">Next Step <i class="fas fa-arrow-right ml-2"></i></button>
                </div>
            </div>
        </form>

        <form id="formStep3" name="form3" class="hide-form">
            <div class="row">
                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBaselineValue">Baseline Value</label>
                        <input name="BaselineValue" type="number" id="inputBaselineValue3" class="form-control">
                    </div>

                    <div class="md-form">
                        <label for="inputTargetValue">Target Value</label>
                        <input name="TargetValue" type="number" id="inputTargetValue3" class="form-control">
                    </div>

                    <div class="md-form">
                        <label for="inputAchieveValue">Achieve Value</label>
                        <input name="AchieveValue" type="number" id="inputAchieveValue3" class="form-control">
                    </div>

                    <select id="selectMeasuringUnit3" name="MeasuringUnit" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Measuring Unit</option>
                        <option value="Person">Person</option>
                        <option value="KM">KM</option>
                    </select>
                </div>

                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBaselineDate3">Baseline Date</label>
                        <input name="BaselineDate" type="text" id="inputBaselineDate3" class="form-control datepicker">
                    </div>

                    <div class="md-form">
                        <label for="inputDate1-1">Date</label>
                        <input name="Date1" type="text" id="inputDate1-1" class="form-control datepicker">
                    </div>

                    <div class="md-form">
                        <label for="inputDate2-1">Date</label>
                        <input name="Date2" type="text" id="inputDate2-1" class="form-control datepicker">
                    </div>

                    <select id="selectPrimarySource3" name="PrimarySource" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Primary Source</option>
                        <option value="Primary Source of Data">Primary Source of Data</option>
                        <option value="DHIS 2">MOV</option>
                    </select>
                </div>

                <div class="col-lg-4">
                    <div class="md-form" style="height: 16%"></div>

                    <select id="selectFrequency1-1" name="Frequency1" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Total">Total</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                    </select>

                    <select id="selectFrequency2-1" name="Frequency2" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                        <option value="Cumulative">Cumulative</option>
                        <option value="Total">Total</option>
                    </select>
                    <select id="selectFrequency3-1" name="Frequency3" class="mdb-select md-form">
                        <option value="" disabled selected>Choose Frequency</option>
                        <option value="Monthly">Monthly</option>
                        <option value="Quarterly">Quarterly</option>
                        <option value="Annually">Annually</option>
                        <option value="Cumulative">Cumulative</option>
                    </select>
                </div>
            </div>

            <fieldset class="border px-4 pb-4 pt-2 rounded mt-3">
                <legend class="w-auto m-0">Location</legend>
                <div class="row">
                    <div class="col-lg-3">
                        <select asp-items="@ViewBag.Country" id="selectCountry3" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>District</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <select id="selectState3" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>Sub-District</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <select id="selectCity3" name="CityId" class="mdb-select md-form m-0" searchable="Search here..">
                            <option value="" disabled selected>Village</option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <button id="btnLocationAdd3" type="button" class="btn btn-sm btn-outline-success btn-rounded mb-0"><i class="fas fa-map-marker-alt"></i> Add Location</button>
                    </div>
                </div>
            </fieldset>

            <div class="row">
                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputBudget">Budget</label>
                        <input id="inputBudget" name="Budget" type="text" class="form-control">
                    </div>
                </div>
                <div class="col-lg-4">
                    <div class="md-form">
                        <label for="inputExpenditure">Expenditure</label>
                        <input id="inputExpenditure" name="Expenditure" type="text" class="form-control">
                    </div>
                </div>
                <div class="col-lg-4">
                    <select id="selectCurrencyMeasuringUnit" name="CurrencyMeasuringUnit" class="mdb-select md-form">
                        <option value="" disabled selected>Currency Measuring Unit</option>
                        <option value="BDT">BDT</option>
                        <option value="USD">USD</option>
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputSummaryOrRemarks">Summary Or Remarks</label>
                        <input id="inputSummaryOrRemarks" name="SummaryOrRemarks" type="text" class="form-control">
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="md-form">
                        <label for="inputReasonOfDeviation">Reason Of Deviation</label>
                        <input id="inputReasonOfDeviation" name="ReasonOfDeviation" type="text" class="form-control">
                    </div>
                </div>
            </div>

            <label id="beneficiaryError3" class="red-text d-inline-block"></label>
            <table class="table table-sm">
                <thead class="grey lighten-5">
                    <tr>
                        <th>
                            <select asp-items="@ViewBag.Participants" id="selectParticipant3" class="mdb-select md-form m-0">
                                <option value="" disabled selected>Participants</option>
                            </select>
                        </th>
                        <th>
                            <div class="md-form m-0">
                                <input type="text" id="inputParticipant3" class="form-control">
                                <label for="inputParticipant3">Participant Count</label>
                            </div>
                        </th>
                        <th class="text-right" style="width: 130px">
                            <button id="btnBeneficiaryAdd3" type="button" class="btn btn-sm btn-outline-success btn-rounded mb-0"><i class="fas fa-user-plus"></i> Add</button>
                        </th>
                    </tr>
                </thead>
                <tbody id="participantBody3"></tbody>
            </table>

            <div class="d-flex justify-content-between align-items-center mt-5">
                <button id="btnDeleteStep3" class="btn btn-danger">Delete</button>
                <div class="text-right">
                    <button id="btnStep3" type="submit" class="btn btn-custom-bg">Submit</button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts{
    <script>
        $(function() {
            $('.mdb-select').materialSelect();
            $('.datepicker').pickadate();
        });

        const formStep1 = document.getElementById("formStep1");
        const formStep2 = document.getElementById("formStep2");
        const formStep3 = document.getElementById("formStep3");

        const selectProjectName = document.getElementById("selectProjectName");
        const selectProjectError = document.getElementById("selectProject");


        //***location step 1****
        const selectCountry = document.getElementById("selectCountry");
        const selectState = document.getElementById("selectState");
        const selectCity = document.getElementById("selectCity");

        //on change country step 1
        selectCountry.addEventListener("change", function() {
            const id = +this.value

            if (!id) return;

            $.ajax({
                url: "/Projects/GetStateByCountry",
                data: { id },
                success: function(response) {
                    if (!response.IsSuccess) return;

                    const fragment = document.createDocumentFragment();
                    fragment.appendChild(createDropdownOption({ value: "", label: "Sub-District" }, true, true));

                    response.Data.forEach(item => {
                        fragment.appendChild(createDropdownOption(item, false, false));
                    });

                    selectCity.innerHTML = "";
                    selectCity.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                    selectState.innerHTML = "";
                    selectState.appendChild(fragment);
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });

        //on change state step 1
        selectState.addEventListener("change", function() {
            const id = +this.value

            if (!id) return;

            $.ajax({
                url: "/Projects/GetCityByState",
                data: { id },
                success: function(response) {
                    if (!response.IsSuccess) return;

                    const fragment = document.createDocumentFragment();
                    fragment.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                    response.Data.forEach(item => {
                        fragment.appendChild(createDropdownOption(item, false, false));
                    });

                    selectCity.innerHTML = "";
                    selectCity.appendChild(fragment);
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });


        //***location step 2****
        const selectCountry2 = document.getElementById("selectCountry2");
        const selectState2 = document.getElementById("selectState2");
        const selectCity2 = document.getElementById("selectCity2");

        //on change country step 2
        selectCountry2.addEventListener("change", function() {
            const id = +this.value

            if (!id) return;

            $.ajax({
                url: "/Projects/GetStateByCountry",
                data: { id },
                success: function(response) {
                    if (!response.IsSuccess) return;

                    const fragment = document.createDocumentFragment();
                    fragment.appendChild(createDropdownOption({ value: "", label: "Sub-District" }, true, true));

                    response.Data.forEach(item => {
                        fragment.appendChild(createDropdownOption(item, false, false));
                    });

                    selectCity2.innerHTML = "";
                    selectCity2.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                    selectState2.innerHTML = "";
                    selectState2.appendChild(fragment);
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });

        //on change state step 2
        selectState2.addEventListener("change", function() {
            const id = +this.value

            if (!id) return;

            $.ajax({
                url: "/Projects/GetCityByState",
                data: { id },
                success: function(response) {
                    if (!response.IsSuccess) return;

                    const fragment = document.createDocumentFragment();
                    fragment.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                    response.Data.forEach(item => {
                        fragment.appendChild(createDropdownOption(item, false, false));
                    });

                    selectCity2.innerHTML = "";
                    selectCity2.appendChild(fragment);
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });


        //***location step 3****
        const selectCountry3 = document.getElementById("selectCountry3");
        const selectState3 = document.getElementById("selectState3");
        const selectCity3 = document.getElementById("selectCity3");

        //on change country step 3
        selectCountry3.addEventListener("change", function() {
            const id = +this.value

            if (!id) return;

            $.ajax({
                url: "/Projects/GetStateByCountry",
                data: { id },
                success: function(response) {
                    if (!response.IsSuccess) return;

                    const fragment = document.createDocumentFragment();
                    fragment.appendChild(createDropdownOption({ value: "", label: "Sub-District" }, true, true));

                    response.Data.forEach(item => {
                        fragment.appendChild(createDropdownOption(item, false, false));
                    });

                    selectCity3.innerHTML = "";
                    selectCity3.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                    selectState3.innerHTML = "";
                    selectState3.appendChild(fragment);
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });

        //on change state step 3
        selectState3.addEventListener("change", function() {
            const id = +this.value

            if (!id) return;

            $.ajax({
                url: "/Projects/GetCityByState",
                data: { id },
                success: function(response) {
                    if (!response.IsSuccess) return;

                    const fragment = document.createDocumentFragment();
                    fragment.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                    response.Data.forEach(item => {
                        fragment.appendChild(createDropdownOption(item, false, false));
                    });

                    selectCity3.innerHTML = "";
                    selectCity3.appendChild(fragment);
                },
                error: function(err) {
                    console.log(err);
                }
            });
        });


        //global obj
        const tempModel = {
            beneficiaries1: [],
            beneficiaries2: [],
            beneficiaries3: []
        }

        //on change Project Name
        selectProjectName.addEventListener("change", function(evt) {
            selectProjectError.textContent = "";
            const id = this.value;
            const steps = { first: 1, second: 2, third: 3 }

            if (!id) return;

            //1st step
            $.ajax({
                url: "/ProjectLogFrame/GetLogFrameIndicatorStep",
                data: { id, step: steps.first },
                success: response => {
                    setProjectData(response.Data, response.IsSuccess, formStep1.name);

                    //re assign inserted value
                    tempModel.beneficiaries1 = [];

                    if (response.IsSuccess) {
                        tempModel.beneficiaries1.push(...response.Data.ProjectParticipants);
                        appendParticipants(tempModel.beneficiaries1, participantBody1);

                        //get location
                        getLocation(response.Data.CityId, 1);
                    }
                },
                error: err => console.log(err)
            });

            //2nd step
            $.ajax({
                url: "/ProjectLogFrame/GetLogFrameIndicatorStep",
                data: { id, step: steps.second },
                success: response => {
                    setProjectData(response.Data, response.IsSuccess, formStep2.name);

                    //re assign inserted value
                    tempModel.beneficiaries2 = [];

                    if (response.IsSuccess) {
                        tempModel.beneficiaries2.push(...response.Data.ProjectParticipants);
                        appendParticipants(tempModel.beneficiaries2, participantBody2);

                        //get location
                        getLocation(response.Data.CityId, 2);
                    }
                },
                error: err => console.log(err)
            });

            //3nd step
            $.ajax({
                url: "/ProjectLogFrame/GetLogFrameIndicatorStep",
                data: { id, step: steps.third },
                success: response => {
                    setProjectData(response.Data, response.IsSuccess, formStep3.name);

                    //re assign inserted value
                    tempModel.beneficiaries3 = [];

                    if (response.IsSuccess) {
                        tempModel.beneficiaries3.push(...response.Data.ProjectParticipants);
                        appendParticipants(tempModel.beneficiaries3, participantBody3);

                        //get location
                        getLocation(response.Data.CityId, 3);
                    }
                },
                error: err => console.log(err)
            });
        });

        //get form data as object
        var serializeForm = function(form) {
            const obj = {};
            const formData = new FormData(form);
            for (let key of formData.keys()) {
                obj[key] = formData.get(key);
            }
            return obj;
        };

        //submit form Step1
        formStep1.addEventListener("submit", function(evt) {
            evt.preventDefault();

            const projectId = selectProject();

            if (!projectId) return;

            const data = serializeForm(evt.target);
            data.ProjectId = projectId;

            if (tempModel.beneficiaries1.length) {
                data.ProjectParticipants = tempModel.beneficiaries1;
            }

            this.btnStep1.disabled = true;
            this.btnStep1.textContent = "Submitting..";

            $.ajax({
                url: "/ProjectLogFrame/PostLogFrameIndicatorStep1",
                type: "POST",
                data: data,
                success: response => {
                    this.btnStep1.disabled = false;
                    this.btnStep1.textContent = "Submit";

                    if (response.IsSuccess) {
                        $.notify("Indicator Successfully submitted!", "success");
                        return;
                    }
                    $.notify(response.Message, "error");
                },
                error: err => {
                    console.log(err);
                    this.btnStep1.disabled = false;
                    this.btnStep1.textContent = "Submit";
                }
            });
        });

        //submit form Step2
        formStep2.addEventListener("submit", function(evt) {
            evt.preventDefault();

            const projectId = selectProject();

            if (!projectId) return;

            const data = serializeForm(evt.target);
            data.ProjectId = projectId;

            if (tempModel.beneficiaries2.length) {
                data.ProjectParticipants = tempModel.beneficiaries2;
            }

            this.btnStep2.disabled = true;
            this.btnStep2.textContent = "Submitting..";

            $.ajax({
                url: "/ProjectLogFrame/PostLogFrameIndicatorStep2",
                type: "POST",
                data: data,
                success: response => {
                    this.btnStep2.disabled = false;
                    this.btnStep2.textContent = "Submit";

                    if (response.IsSuccess) {
                        $.notify("Output Successfully submitted!", "success");
                        return;
                    }
                    $.notify(response.Message, "error");
                },
                error: err => {
                    console.log(err);
                    this.btnStep2.disabled = false;
                    this.btnStep2.textContent = "Submit";
                }
            });
        });

        //submit form Step2
        formStep3.addEventListener("submit", function(evt) {
            evt.preventDefault();

            const projectId = selectProject();

            if (!projectId) return;

            const data = serializeForm(evt.target);
            data.ProjectId = projectId;

            if (tempModel.beneficiaries3.length) {
                data.ProjectParticipants = tempModel.beneficiaries3;
            }

            this.btnStep3.disabled = true;
            this.btnStep3.textContent = "Submitting..";

            $.ajax({
                url: "/ProjectLogFrame/PostLogFrameIndicatorStep3",
                type: "POST",
                data: data,
                success: response => {
                    this.btnStep3.disabled = false;
                    this.btnStep3.textContent = "Submit";

                    if (response.IsSuccess) {
                        $.notify("Activity Successfully submitted!", "success");
                        return;
                    }
                    $.notify(response.Message, "error");
                },
                error: err => {
                    console.log(err);
                    this.btnStep3.disabled = false;
                    this.btnStep3.textContent = "Submit";
                }
            });
        });


        //set already inserted data
        function setProjectData(items, isData, form) {
            const elements = document.forms[form].elements;

            for (let i = 0; i < elements.length; i++) {
                const input = elements[i];

                if (isData) {
                    Object.entries(items).forEach(([key, val]) => {
                        if (input.name === key) {
                            if (input.type === "text" || input.type === "number" || input.type === "select-one") {
                                $(`select#${input.id} option[value='${val}']`).attr("selected", true);
                                $(`select#${input.id}`).val(`${val}`).change();

                                if (input.classList.contains("datepicker")) {
                                    input.value = val ? moment(val).format("DD MMMM, YYYY") : "";
                                } else {
                                    input.value = val;
                                }

                                if (input.previousElementSibling && input.previousElementSibling.tagName === "LABEL" && val) {
                                    input.previousElementSibling.classList.add("active");
                                }
                            }
                        }
                    })
                } else {
                    if (!input.classList.contains("select-dropdown")) {
                        input.value = "";
                    }

                    if (input.previousElementSibling && input.previousElementSibling.tagName === "LABEL") {
                        input.previousElementSibling.classList.remove("active");
                    }

                    if (input.classList.contains("mdb-select")) {
                        $(`select#${input.id}`).val('0').change();
                    }
                }
            }


        }

        /***Location add****/
        function addLocation(btn, step) {
            const btnLocationAdd = document.getElementById("btnLocationAdd");
            const bodyLocation = document.getElementById("bodyLocation");

            btnLocationAdd.addEventListener("click", function() {
                const cityId = +selectCity.value;
                if (!cityId) return;

                if (model.CityIds.indexOf(cityId) !== -1) return;

                model.CityIds.push(cityId);

                const tr = document.createElement("tr");
                tr.innerHTML = `
                <td>${getSelectedText(selectCountry)}</td>
                <td>${getSelectedText(selectState)}</td>
                <td>${getSelectedText(selectCity)}</td>
                <td><i data-id="${cityId}" class="remove fas fa-trash-alt"></i></td>`;

                bodyLocation.appendChild(tr);
            });
        }

        //get dropdown selected text
        function getSelectedText(select) {
            return select.options[select.selectedIndex].text;
        }


        //get location data
        function getLocation(id, step) {
            $.ajax({
                url: "/ProjectLogFrame/GetSelectedLocations",
                data: { id },
                success: response => {
                    locationSelected(response.Data, step)
                },
                error: err => console.log(err)
            });
        }

        //set location selected
        function locationSelected(location, step) {
            if (step === 1) {
                //district
                $(`select#${selectCountry.id} option[value='${location.CountryId}']`).attr("selected", true).val(`${location.CountryId}`).change();

                //sub district
                selectState.innerHTML = "";
                selectState.appendChild(createDropdownOption({ value: "", label: "Sub-District" }, true, true));

                location.States.forEach(item => {
                    const selected = parseInt(item.value) === location.StateId ? true : false;
                    selectState.appendChild(createDropdownOption(item, false, selected));
                });


                //village
                selectCity.innerHTML = "";
                selectCity.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                location.Cities.forEach(item => {
                    const selected = parseInt(item.value) === location.CityId ? true : false;
                    selectCity.appendChild(createDropdownOption(item, false, selected));
                });
            }

            if (step === 2) {
                //district
                $(`select#${selectCountry2.id} option[value='${location.CountryId}']`).attr("selected", true).val(`${location.CountryId}`).change();

                //sub district
                selectState2.innerHTML = "";
                selectState2.appendChild(createDropdownOption({ value: "", label: "Sub-District" }, true, true));

                location.States.forEach(item => {
                    const selected = parseInt(item.value) === location.StateId ? true : false;
                    selectState2.appendChild(createDropdownOption(item, false, selected));
                });


                //village
                selectCity2.innerHTML = "";
                selectCity2.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                location.Cities.forEach(item => {
                    const selected = parseInt(item.value) === location.CityId ? true : false;
                    selectCity2.appendChild(createDropdownOption(item, false, selected));
                });
            }

            if (step === 3) {
                //district
                $(`select#${selectCountry3.id} option[value='${location.CountryId}']`).attr("selected", true).val(`${location.CountryId}`).change();

                //sub district
                selectState3.innerHTML = "";
                selectState3.appendChild(createDropdownOption({ value: "", label: "Sub-District" }, true, true));

                location.States.forEach(item => {
                    const selected = parseInt(item.value) === location.StateId ? true : false;
                    selectState3.appendChild(createDropdownOption(item, false, selected));
                });


                //village
                selectCity3.innerHTML = "";
                selectCity3.appendChild(createDropdownOption({ value: "", label: "Village" }, true, true));

                location.Cities.forEach(item => {
                    const selected = parseInt(item.value) === location.CityId ? true : false;
                    selectCity3.appendChild(createDropdownOption(item, false, selected));
                });
            }
        }

        //create dropdown options
        function createDropdownOption(item, disabled, selected) {
            const option = document.createElement("option");
            option.value = item.value;
            option.text = item.label;
            option.disabled = disabled;
            option.selected = selected;

            return option;
        }


        //check select project or not
        function selectProject() {
            if (!selectProjectName.value) {
                selectProjectError.textContent = "Select project name";
                return false;
            }

            return selectProjectName.value;
        }

        //on step change
        function stepClick(step, self) {
            const forms = document.querySelectorAll(".hide-form");

            //add active class
            const actives = document.querySelector(".progressbar .active");
            actives.classList.remove("active");
            self.className = "active";

            for (let i = 0; i < forms.length; i++) {
                if (i + 1 === step) {
                    forms[i].classList.add("active-form");
                } else {
                    forms[i].classList.remove("active-form");
                }
            }
        }

        //**Add Participant 1 ***
        const selectParticipant1 = document.getElementById("selectParticipant1");
        const inputParticipant1 = document.getElementById("inputParticipant1");

        const btnBeneficiaryAdd = document.getElementById("btnBeneficiaryAdd");
        const beneficiaryError = document.getElementById("beneficiaryError");
        const participantBody1 = document.getElementById("participantBody1");

        //add
        btnBeneficiaryAdd.addEventListener("click", function(evt) {
            evt.preventDefault();
            beneficiaryError.textContent = "";

            const id = +selectParticipant1.value;
            const type = selectParticipant1.options[selectParticipant1.selectedIndex].text;
            const count = +inputParticipant1.value;

            if (!id) {
                beneficiaryError.textContent = "Select Participant";
                return;
            }

            if (!count) {
                beneficiaryError.textContent = "Add Participant Count";
                return;
            }

            const obj = {
                ProjectBeneficiaryTypeId: id,
                BeneficiaryType: type,
                Count: count
            }

            const isAdded = tempModel.beneficiaries1.some(function(el) {
                return el.ProjectBeneficiaryTypeId === id;
            });

            if (isAdded) return;

            tempModel.beneficiaries1.push(obj);

            //append to participant
            appendParticipants(tempModel.beneficiaries1, participantBody1);

            inputParticipant1.value = "";
        });

        //remove
        participantBody1.addEventListener("click", function(evt) {
            const element = evt.target;
            const onDelete = element.classList.contains("remove");

            if (!onDelete) return;

            const id = +element.getAttribute("data-id");

            tempModel.beneficiaries1 = tempModel.beneficiaries1.filter(el => el.ProjectBeneficiaryTypeId !== id);
            element.parentElement.parentElement.remove();
        });


        //**Add Participant 2***
        const selectParticipant2 = document.getElementById("selectParticipant2");
        const inputParticipant2 = document.getElementById("inputParticipant2");

        const btnBeneficiaryAdd2 = document.getElementById("btnBeneficiaryAdd2");
        const beneficiaryError2 = document.getElementById("beneficiaryError2");
        const participantBody2 = document.getElementById("participantBody2");

        //add
        btnBeneficiaryAdd2.addEventListener("click", function(evt) {
            evt.preventDefault();
            beneficiaryError.textContent = "";

            const id = +selectParticipant2.value;
            const type = selectParticipant2.options[selectParticipant2.selectedIndex].text;
            const count = +inputParticipant2.value;

            if (!id) {
                beneficiaryError2.textContent = "Select Participant";
                return;
            }

            if (!count) {
                beneficiaryError2.textContent = "Add Participant Count";
                return;
            }

            const obj = {
                ProjectBeneficiaryTypeId: id,
                BeneficiaryType: type,
                Count: count
            }

            const isAdded = tempModel.beneficiaries2.some(function(el) {
                return el.ProjectBeneficiaryTypeId === id;
            });

            if (isAdded) return;

            tempModel.beneficiaries2.push(obj);

            //append to participant
            appendParticipants(tempModel.beneficiaries2, participantBody2);

            inputParticipant2.value = "";
        });

        //remove
        participantBody2.addEventListener("click", function(evt) {
            const element = evt.target;
            const onDelete = element.classList.contains("remove");

            if (!onDelete) return;

            const id = +element.getAttribute("data-id");

            tempModel.beneficiaries2 = tempModel.beneficiaries2.filter(el => el.ProjectBeneficiaryTypeId !== id);
            element.parentElement.parentElement.remove();
        });


        //**Add Participant 3 ***
        const selectParticipant3 = document.getElementById("selectParticipant3");
        const inputParticipant3 = document.getElementById("inputParticipant3");

        const btnBeneficiaryAdd3 = document.getElementById("btnBeneficiaryAdd3");
        const beneficiaryError3 = document.getElementById("beneficiaryError3");
        const participantBody3 = document.getElementById("participantBody3");

        //add
        btnBeneficiaryAdd3.addEventListener("click", function(evt) {
            evt.preventDefault();
            beneficiaryError.textContent = "";

            const id = +selectParticipant3.value;
            const type = selectParticipant3.options[selectParticipant3.selectedIndex].text;
            const count = +inputParticipant3.value;

            if (!id) {
                beneficiaryError3.textContent = "Select Participant";
                return;
            }

            if (!count) {
                beneficiaryError3.textContent = "Add Participant Count";
                return;
            }

            const obj = {
                ProjectBeneficiaryTypeId: id,
                BeneficiaryType: type,
                Count: count
            }

            const isAdded = tempModel.beneficiaries3.some(function(el) {
                return el.ProjectBeneficiaryTypeId === id;
            });

            if (isAdded) return;

            tempModel.beneficiaries3.push(obj);

            //append to participant
            appendParticipants(tempModel.beneficiaries3, participantBody3);

            inputParticipant3.value = "";
        });

        //remove
        participantBody3.addEventListener("click", function(evt) {
            const element = evt.target;
            const onDelete = element.classList.contains("remove");

            if (!onDelete) return;

            const id = +element.getAttribute("data-id");

            tempModel.beneficiaries3 = tempModel.beneficiaries3.filter(el => el.ProjectBeneficiaryTypeId !== id);
            element.parentElement.parentElement.remove();
        });

        //append participant to table
        function appendParticipants(items, tBody) {
            tBody.innerHTML = "";
            const fragment = document.createDocumentFragment();

            items.forEach(item => {
                const tr = document.createElement("tr");
                tr.innerHTML = `<td>${item.BeneficiaryType}</td><td>${item.Count}</td><td><i data-id="${item.ProjectBeneficiaryTypeId}" class="remove fas fa-trash-alt red-text" style="cursor: pointer"></i></td>`;
                fragment.appendChild(tr);
            });
            tBody.appendChild(fragment);
        }


        //***DELETE***
        const btnDeleteStep1 = document.getElementById("btnDeleteStep1");
        btnDeleteStep1.addEventListener("click", function(evt) {
            evt.preventDefault();
            const id = selectProjectName.value;

            if (!id) return;

            $.ajax({
                url: "/ProjectLogFrame/DeleteStep1",
                type: "POST",
                data: { id },
                success: response => {
                    if (response.IsSuccess) {
                        location.reload();
                        return;
                    }
                    $.notify(response.Message, "error");
                },
                error: err => {
                    console.log(err);
                }
            });
        });

        const btnDeleteStep2 = document.getElementById("btnDeleteStep2");
        btnDeleteStep2.addEventListener("click", function(evt) {
            evt.preventDefault();
            const id = selectProjectName.value;

            if (!id) return;

            $.ajax({
                url: "/ProjectLogFrame/DeleteStep2",
                type: "POST",
                data: { id },
                success: response => {
                    if (response.IsSuccess) {
                        location.reload();
                        return;
                    }
                    $.notify(response.Message, "error");
                },
                error: err => {
                    console.log(err);
                }
            });
        });

        const btnDeleteStep3 = document.getElementById("btnDeleteStep3");
        btnDeleteStep3.addEventListener("click", function(evt) {
            evt.preventDefault();
            const id = selectProjectName.value;

            if (!id) return;

            $.ajax({
                url: "/ProjectLogFrame/DeleteStep3",
                type: "POST",
                data: { id },
                success: response => {
                    if (response.IsSuccess) {
                        location.reload();
                        return;
                    }
                    $.notify(response.Message, "error");
                },
                error: err => {
                    console.log(err);
                }
            });
        });
    </script>
}